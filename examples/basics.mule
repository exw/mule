{ type bool = True | False
, type eq =
    { type t
    , (==) : t -> t -> bool
      """An equivalence relation on `t`, i.e. `(==)` must be:

      * Reflexive: `x == x`
      * Symmetric: `(x == y) == (y == x)`
      * Transitive: if `x == y` and `y == z` then `x == z`.
      """
    }
, type order = LT | EQ | GT
, type ord =
    { type t
    , compare : t -> t -> order
      """A total order on `t`, i.e. given the definition:

          (<=) =
            fn l r. match compare l r with
              | LT -> True
              | EQ -> True
              | GT -> False
            end

      `(<=)` should satisfy:

      * if `x <= y` and `y <= x` then `compare x y == EQ` (antisymmetry).
      * if `x <= y` and `y <= z` then `x <= z` (transitivity).
      * `x <= y` or `y <= x` (connex property).
      """
    }
, type semigroup =
    { type t
    , append : t -> t -> t
    }
, type monoid =
    { ~@use semigroup
    , empty : t -> t -> t
    }
, type ring =
    { type t
    , zero : t
    , one : t
    , (+) : t -> t -> t
    , (*) : t -> t -> t
    , negate : t -> t
    , reciprocal : t -> t
    }
, i32 : { type t, ~@use ord, ~@use ring }
, string : { type t, ~@use ord }

, not : bool -> bool =
    fn x. match x with
      | True -> False
      | False -> True
    end

, (||) : bool -> bool -> bool =
    fn l r. match l with
      | True -> True
      | False -> r
    end

, (&&) : bool -> bool -> bool =
    fn l r. match l with
      | False -> False
      | True -> r
    end

, (<) : ?ord -> ord.t -> ord.t -> bool =
    fn {compare} l r = match compare l r with
      | LT -> True
      | _ -> False
    end

, (>) : ?ord -> ord.t -> ord.t -> bool =
    fn ?{compare} l r = match compare l r with
      | GT -> True
      | _ -> False
    end

, (<=) : ?ord -> ord.t -> ord.t -> bool =
    fn ?{compare} l r. match compare l r with
      | GT -> False
      | _ -> True
    end
, (>=) : ?ord -> ord.t -> ord.t -> bool
    fn ?{compare} l r. match compare l r with
      | LT -> False
      | _ -> True
    end
, (==) : ?eq -> eq.t -> eq.t -> bool = fn ?{(==)} l r. l == r
, (!=) : ?eq -> eq.t -> eq.t -> bool = fn ?{(==)} l r. not (l == r)
}
