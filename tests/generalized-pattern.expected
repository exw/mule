
Desugared:

	(let
	 ($4
	  (fix/record
	   (fn $2
	    (((.= $0) (((.= x) {}) ((: (all a (a -> a))) ((. $0) $2))))
	     ((match ((Ok ($3 ((match () ($1 $1)) $3))))) ((fn x (Ok x)) (fn x x)))))))
	 (let (x ((. x) $4))
	  (let ($0 ((. $0) $4))
	   (fix/record (fn $5 (((.= k) (((.= v) {}) (x (fn y y)))) (x {})))))))

inferred type:

	(all a
	 (all b
	  (all c
	   (record (types (...c))
	    (values ((k (record (types (...b)) (values ()))) (v (a -> a))))))))

Runtime term:

	(App
	 ((Lam
	   (1 ()
	    (App
	     ((Lam
	       (1 ()
	        (App
	         ((Lam
	           (1 ()
	            (App
	             ((Fix Record)
	              (Lam
	               (2 ()
	                (Record
	                 ((k (App ((Var 2) (Record ()))))
	                  (v (App ((Var 2) (Lam (0 () (Var 0))))))))))))))
	          (App ((GetField (Strict $0)) (Var 1)))))))
	      (App ((GetField (Strict x)) (Var 0)))))))
	  (App
	   ((Fix Record)
	    (Lam
	     (0 ()
	      (Record
	       (($0
	         (App
	          ((Match
	            (cases
	             ((Ok
	               (Lam
	                (0 ()
	                 (App
	                  ((Match (cases ()) (default ((Lam (0 () (Var 0))))))
	                   (Var 0))))))))
	            (default ()))
	           (App ((Lam (0 () (Ctor (Ok (Var 0))))) (Lam (0 () (Var 0))))))))
	        (x (App ((GetField (Lazy $0)) (Var 0))))))))))))

Evaluated:

	(Record ((k (Record ())) (v (Lam (0 () (Var 0))))))
