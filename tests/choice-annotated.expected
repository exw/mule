
Desugared:

	fn $0. let choice = (_ : all a. a -> a -> a) $0 in
	       _.x:=_ (_.y:=_ {} (choice fn x. x fn x. x)) (choice {} {})

inferred type:

	(a -> a -> a) -> {x : {}, y : b -> b}

Runtime term:

	fn. (fn. (fn. fn. v1 where { x = v0 }) ((fn. fn. v1 where { y = v0 }) {} (v0 fn. v0 fn. v0)) (v0 {} {})) v0

Evaluated:

	fn. (fn. (fn. fn. v1 where { x = v0 }) ((fn. fn. v1 where { y = v0 }) {} (v0 fn. v0 fn. v0)) (v0 {} {})) v0
