
Desugared:

	fn $0. let choice = (_ : all a. a -> a -> a) $0 in _ where { x = _ } (_ where { y = _ } {} (choice fn x. x fn x. x)) (choice {} {})

inferred type:

	(a -> a -> a) -> {x : {}, y : b -> b}

Runtime term:

	fn $0. (fn choice. (fn $176. fn $177. $176 where { x = $177 }) ((fn $174. fn $175. $174 where { y = $175 }) {} (choice fn x. x fn x. x)) (choice {} {})) $0

Evaluated:

	fn $0. (fn choice. (fn $176. fn $177. $176 where { x = $177 }) ((fn $174. fn $175. $174 where { y = $175 }) {} (choice fn x. x fn x. x)) (choice {} {})) $0
