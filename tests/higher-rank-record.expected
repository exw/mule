
Desugared:

	let r = fix/let fn r. fix/record fn $1. _.y:=_ {} fn x. x in
	let f = fix/let fn f. (_ : all a. a -> a) (_.y r) in
	fix/record fn $0. _.l:=_ (_.k:=_ {} (f fn z. z)) (f {})

inferred type:

	{k : a -> a, l : {}}

Runtime term:

	(fn. (fn. fix/record fn. {k = v1 fn. v0, l = v1 {}}) (fix/let fn. _.y v1)) (fix/let fn. fix/record fn. {y = fn. v0})

Evaluated:

	{k = fn. v0, l = {}}
