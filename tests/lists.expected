
Desugared:

	(let-type
	 ((list
	   (lam a
	    (rec list
	     (union
	      ((Cons (record (types ()) (values ((tl list) (hd a)))))
	       (Nil (record (types ()) (values ())))))))))
	 (let
	  (length
	   (fix/let
	    (fn length
	     ((: (all a ((list a) -> int)))
	      (fn lst
	       ((match
	         ((Cons
	           ($3
	            ((match () (l ((((. add) int) (Integer 1)) (length ((. tl) l)))))
	             $3)))
	          (Nil ($4 ((match () (_ (Integer 0))) $4)))))
	        lst))))))
	  (length
	   ((fn x (Cons x))
	    (fix/record
	     (fn $0
	      (((.= hd)
	        (((.= tl) {})
	         ((fn x (Cons x))
	          (fix/record
	           (fn $1
	            (((.= hd)
	              (((.= tl) {})
	               ((fn x (Cons x))
	                (fix/record
	                 (fn $2
	                  (((.= hd) (((.= tl) {}) ((fn x (Nil x)) {}))) (Integer 1)))))))
	             (Integer 0)))))))
	       (Integer 4))))))))

inferred type:

	int

Runtime term:

	(App
	 ((Lam
	   (0 ()
	    (App
	     ((Var 0)
	      (App
	       ((Lam (0 () (Ctor (Cons (Var 0)))))
	        (App
	         ((Fix Record)
	          (Lam
	           (0 ()
	            (Record
	             ((hd (Const (Integer 4)))
	              (tl
	               (App
	                ((Lam (0 () (Ctor (Cons (Var 0)))))
	                 (App
	                  ((Fix Record)
	                   (Lam
	                    (0 ()
	                     (Record
	                      ((hd (Const (Integer 0)))
	                       (tl
	                        (App
	                         ((Lam (0 () (Ctor (Cons (Var 0)))))
	                          (App
	                           ((Fix Record)
	                            (Lam
	                             (0 ()
	                              (Record
	                               ((hd (Const (Integer 1)))
	                                (tl
	                                 (App
	                                  ((Lam (0 () (Ctor (Nil (Var 0)))))
	                                   (Record ()))))))))))))))))))))))))))))))))))
	  (App
	   ((Fix Let)
	    (Lam
	     (3 ()
	      (Lam
	       (3 ()
	        (App
	         ((Match
	           (cases
	            ((Cons
	              (Lam
	               (3 ()
	                (App
	                 ((Match (cases ())
	                   (default
	                    ((Lam
	                      (3 ()
	                       (App
	                        ((App
	                          ((App
	                            ((GetField (Strict add))
	                             (Record
	                              ((add (Prim <fun>)) (div (Prim <fun>))
	                               (mul (Prim <fun>)) (rem (Prim <fun>))
	                               (sub (Prim <fun>))))))
	                           (Const (Integer 1))))
	                         (App
	                          ((Var 3) (App ((GetField (Strict tl)) (Var 0))))))))))))
	                  (Var 0))))))
	             (Nil
	              (Lam
	               (0 ()
	                (App
	                 ((Match (cases ())
	                   (default ((Lam (0 () (Const (Integer 0)))))))
	                  (Var 0))))))))
	           (default ()))
	          (Var 0)))))))))))

Evaluated:

	(Const (Integer 3))
